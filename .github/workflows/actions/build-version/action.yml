name: Build package
inputs:
  crate:
    description: crates to build
    required: true
  features:
    description: features to enable
    required: true
  no_default_features:
    description: disable default features
    required: true
  target_arch:
    description: Target to build against
    required: true
outputs:
  artifact:
    description: "artifact"
    value: ${{ steps.collect-binaries.outputs.artifact }}

env:
  CRATE: ${{ inputs.crate }}
  TARGET_ARCH: ${{ input.target_arch }}
  FEATURES: ${{ inputs.features }}

runs:
  using: composite
  steps:
   - name: Install stable rust
     if: runner.os != 'Linux'
     run: rustup target add "$TARGET_ARCH"

   - uses: taiki-e/install-action@v2
     if: runner.os != 'Linux'
     with:
       tool: cargo-auditable

   - uses: ./.github/actions/docker-setup 
     if: runner.os == 'Linux'
       
   - name: Install LLVM
     if: runner.os == 'Windows'
     run: choco install llvm

   - name: Install LLVM
     if: runner.os == 'macOS'
     run: |
       set -euxo pipefail
       brew install llvm
       LLVM_PREFIX="$(brew --prefix llvm)"
       echo "${LLVM_PREFIX}/bin" >> "$GITHUB_PATH"
       echo "LLVM_CONFIG_PATH=${LLVM_PREFIX}/bin/llvm-config" >> "$GITHUB_ENV"
       echo "DYLD_LIBRARY_PATH=${LLVM_PREFIX}/lib:${LD_LIBRARY_PATH:-}" >> "$GITHUB_ENV"
       echo "LIBCLANG_PATH=$(llvm-config --libdir)" >> "$GITHUB_ENV"
       echo "LLVM_DIR=$(llvm-config --cmakedir)" >> "$GITHUB_ENV"

   - name: Decide cargo args, tempdir and cargo root
     run: |
       set -exuo pipefail
       features="${FEATURES:-}"
       if [ -z "$features" ]; then
         feature_flag=""
       else
         feature_flag="--features"
       fi
       no_default_features=""
       if [ "${NO_DEFAULT_FEATURES:-}" = "true" ]; then
         no_default_features='--no-default-features'
       fi
       echo "CARGO_ARGS=$no_default_features $feature_flag $features" >> "$GITHUB_ENV"
       echo "TEMPDIR=$(mktemp -d)" >> "$GITHUB_ENV"
       echo "CARGO_ROOT=$(mktemp -d 2>/dev/null || mktemp -d -t 'cargo-root')" >> "$GITHUB_ENV"

   - name: Build packages
     run: ./build-version.sh
   
   - name: Collect binaries
     id: collect-binaries
     run: |
       set -exuo pipefail
       CARGO_BIN_DIR="${CARGO_ROOT}/bin"
       CRATES2_JSON_PATH="${CARGO_ROOT}/.crates2.json"
       BINARIES=$(
         jq -r '
           . installs | to_entries[] | select(.key|startswith("'"${CRATE}"' ")) | .value.bins | .[]
         ' "$CRATES2_JSON_PATH" | tr '\r' ' '
       )
       cd "$CARGO_BIN_DIR"
       for file in $BINARIES; do
         if file "$file" | grep ': data$'; then
           echo "something wrong with $file. Should be recognised as executable."
           exit 1
         fi
       done
       if [ -z "$BINARIES" ]; then
         echo "\`cargo-install\` does not install any binaries!"
         exit 1
       fi
       # Package up the binaries so that they can be untarred in ~/.cargo/bin
       #
       # TODO: maybe we want to make a ~/.cargo-quickinstall/bin to untar into,
       # and add symlinks into ~/.cargo/bin, to aid debugging?
       #
       # BINARIES is a space-separated list of files, so it can't be quoted
       tar --format=v7 -c $BINARIES | gzip -9 -c >"${TEMPDIR}/${CRATE}-${VERSION}-${TARGET_ARCH}.tar.gz"
       echo "artifact=${TEMPDIR}/${CRATE}-${VERSION}-${TARGET_ARCH}.tar.gz" >> "$GITHUB_OUTPUT"
