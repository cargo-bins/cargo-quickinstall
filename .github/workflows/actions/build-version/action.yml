name: Build package
inputs:
  crate:
    description: crates to build
    required: true
    type: string
  features:
    description: features to enable
    required: true
    type: string
  no_default_features:
    description: disable default features
    required: true
    type: string
  target_arch:
    description: Target to build against
    required: true
    type: string
  version:
    description: Version to release
    required: true
    type: string

outputs:
  artifact:
    description: "artifact"
    value: ${{ steps.output.outputs.artifact }}

runs:
  using: composite
  steps:
    - uses: taiki-e/install-action@v2
      if: runner.os != 'Linux'
      with:
        tool: cargo-auditable

    - name: Install LLVM
      if: runner.os == 'Windows'
      run: choco install llvm
      shell: bash

    - name: Install LLVM
      if: runner.os == 'macOS'
      run: |
        set -euxo pipefail
        brew install llvm
        LLVM_PREFIX="$(brew --prefix llvm)"
        echo "${LLVM_PREFIX}/bin" >> "$GITHUB_PATH"
        echo "LLVM_CONFIG_PATH=${LLVM_PREFIX}/bin/llvm-config" >> "$GITHUB_ENV"
        echo "DYLD_LIBRARY_PATH=${LLVM_PREFIX}/lib:${LD_LIBRARY_PATH:-}" >> "$GITHUB_ENV"
        echo "LIBCLANG_PATH=$(llvm-config --libdir)" >> "$GITHUB_ENV"
        echo "LLVM_DIR=$(llvm-config --cmakedir)" >> "$GITHUB_ENV"
      shell: bash

    - name: Decide cargo args, tempdir and cargo root
      env:
        FEATURES: ${{ inputs.features }}
        NO_DEFAULT_FEATURES: ${{ inputs.no_default_features }}
      run: |
        set -exuo pipefail
        features="${FEATURES:-}"
        if [ -z "$features" ]; then
          feature_flag=""
        else
          feature_flag="--features"
        fi
        no_default_features=""
        if [ "${NO_DEFAULT_FEATURES:-}" = "true" ]; then
          no_default_features='--no-default-features'
        fi
        echo "CARGO_ARGS=$no_default_features $feature_flag $features" >> "$GITHUB_ENV"
        echo "TEMPDIR=$(mktemp -d)" >> "$GITHUB_ENV"
        echo CARGO_HOME="$(mktemp -d 2>/dev/null || mktemp -d -t 'cargo-root')" >> "$GITHUB_ENV"
      shell: bash

    - name: Build packages
      if: runner.os != 'Linux'
      run: ./build-version.sh
      shell: bash
      env:
        CRATE: ${{ inputs.crate }}
        VERSION: ${{ input.version }}
        TARGET_ARCH: ${{ inputs.target_arch }}

    - name: Set up Docker Buildx
      if: runner.os == 'Linux'
      uses: docker/setup-buildx-action@v3

    - name: Build docker image for package building
      if: runner.os == 'Linux'
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: package-builder:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          crate=${{ inputs.crate }}
          version=${{ input.version }}
          target_arch=${{ input.target_arch }}

    - uses: ./.github/workflows/actions/docker-setup
      if: runner.os == 'Linux'

    - name: Build packages
      if: runner.os == 'Linux'
      env:
        CRATE: ${{ inputs.crate }}
        VERSION: ${{ input.version }}
        TARGET_ARCH: ${{ inputs.target_arch }}
      run: |
        docker run \
          --rm \
          -it \
          --init \
          --runtime=runsc \
          --security-opt="no-new-privileges=true" \
          --read-only \
          --env CRATE="$CRATE" \
          --env VERSION="$VERSION" \
          --env TARGET_ARCH="$TARGET_ARCH" \
          --env CARGO_ARGS="$CARGO_ARGS" \
          --env TEMPDIR=/root/output \
          --tmpfs /tmp:rw,nosuid \
          --tmpfs /run:rw,noexec,nosuid \
          --mount type=bind,src="$TEMPDIR",dst=/root/output \
          package-builder:latest
      shell: bash

    - name: Output
      id: output
      run: echo "artifact=${TEMPDIR}/${CRATE}-${VERSION}-${TARGET_ARCH}.tar.gz" >> "$GITHUB_OUTPUT"
      shell: bash
